### Questões sobre o Processo de Compilação em Java

1. Qual é a principal diferença entre o processo de compilação em Java e o de linguagens C++?
Em C++, o código fonte é compilado diretamente em código de máquina específico do sistema operacional e processador.
Em Java, o código fonte é compilado para bytecode, que é executado pela Máquina Virtual Java (JVM), tornando o programa portável entre diferentes sistemas.

2. Explique o que acontece em cada uma das três fases de análise do compilador **javac**: Análise Léxica, Análise Sintática e Análise Semântica.
Análise Léxica: transforma o código fonte em tokens (palavras-chave, identificadores, símbolos).
Análise Sintática: organiza os tokens de acordo com a gramática da linguagem, construindo a árvore sintática.
Análise Semântica: verifica coerência lógica (tipos de variáveis, uso correto de métodos, escopo).   

3. O que é o **bytecode** e qual é a sua principal função no processo de compilação do Java?
O bytecode é o código intermediário gerado pelo compilador Java.
Sua principal função é permitir que o programa seja portável e executado em qualquer plataforma que tenha a JVM.

4. Qual é o papel da **Máquina Virtual Java (JVM)** na execução de um programa Java, e por que o arquivo ".class" não é executado diretamente pelo sistema operacional?
A JVM interpreta e/ou compila o bytecode em instruções de máquina do sistema operacional.
O .class não é executado diretamente porque não é código de máquina, e sim um código intermediário universal que depende da JVM para rodar.

5. O que é o compilador **JIT** e como ele melhora o desempenho dos programas em Java?
O JIT (Just-In-Time Compiler) é um compilador dentro da JVM que converte bytecode em código de máquina em tempo de execução.
Isso melhora o desempenho, pois partes do programa são executadas diretamente pelo processador, em vez de apenas interpretadas.

### Questões sobre Linguagens Formais em Java

6. Qual é a aplicação mais comum e direta das linguagens formais em Java, e para que ela é utilizada?
A aplicação mais comum é na definição da gramática da linguagem.
Ela é utilizada para analisar e validar a estrutura sintática do código durante a compilação.

7. No processo de compilação de um código Java, como as linguagens formais são usadas nas fases de Análise Léxica e Análise Sintática?
Na Análise Léxica, usam-se expressões regulares (baseadas em linguagens formais) para reconhecer tokens.
Na Análise Sintática, usa-se uma gramática formal para verificar se a sequência de tokens segue as regras da linguagem.

8. O que é uma **Máquina de Estado Finito (FSM)** e como ela pode ser usada em Java?
Uma FSM é um modelo matemático que representa sistemas que podem estar em diferentes estados, mudando de acordo com entradas.
Em Java, pode ser usada para validar cadeias de caracteres, implementar autômatos, ou controlar fluxos de execução (ex.: parsing de strings, protocolos de comunicação).

9. Como as linguagens formais se relacionam com os schemas de validação de documentos, como os usados para **XML** e **JSON**?
Os schemas (XML Schema, JSON Schema) definem regras formais de estrutura e tipo dos dados.
Essas regras são baseadas em linguagens formais, permitindo validar se um documento está bem-formado e segue a gramática definida.

10. De acordo com o texto, qual é a principal utilidade de ferramentas como o **ANTLR** no contexto de linguagens formais em Java?
O ANTLR é uma ferramenta que gera analisadores léxicos e sintáticos automaticamente a partir de uma gramática formal.
Sua principal utilidade é facilitar a criação de compiladores, interpretadores e validadores de linguagens em Java.
